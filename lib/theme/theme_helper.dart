import 'package:flutter/material.dart';
import '/core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  final _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    PrefUtils().setThemeData(newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.black900,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.purple100.withOpacity(0.3),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.blueGray300,
          fontSize: 15.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray300,
          fontSize: 12.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 12.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 10.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 20.fSize,
          fontFamily: 'Aeonik TRIAL',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X3DFFFFFF),
    primaryContainer: Color(0XFFFF3501),
    secondaryContainer: Color(0X0A1B1C1D),

    // Error colors
    errorContainer: Color(0XFF7584F2),
    onError: Color(0XFFFFD664),

    // On colors(text colors)
    onPrimary: Color(0XFF2B1D61),
    onPrimaryContainer: Color(0XFF0E051D),
    onSecondaryContainer: Color(0X16AAAAAA),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  Color get primary => const Color(0X3DFFFFFF);

  // Amber
  Color get amberA200 => const Color(0XFFF4DD45);

  // Black
  Color get black900 => const Color(0XFF0D031C);

  // Blue
  Color get blueA200 => const Color(0XFF5490F9);

  // BlueGray
  Color get blueGray300 => const Color(0XFFA69FBE);

  // DeepOrange
  Color get deepOrange300 => const Color(0XFFF29F60);

  // DeepPurple
  Color get deepPurple100 => const Color(0XFFCAC2FF);
  Color get deepPurple50 => const Color(0XFFEDE7FC);
  Color get deepPurple60000 => const Color(0X00612DA4);
  Color get deepPurpleA200 => const Color(0XFF9747FF);

  // Indigo
  Color get indigo900 => const Color(0XFF2B1C60);
  Color get indigoA200 => const Color(0XFF6F67EA);

  // Orange
  Color get orange100 => const Color(0XFFFBDEB1);

  // Pink
  Color get pink300 => const Color(0XFFEA5F7E);
  Color get pinkA200 => const Color(0XFFFF3C7D);

  // Purple
  Color get purple100 => const Color(0XFFE0B9FF);
  Color get purple10001 => const Color(0XFFDFB8FF);
  Color get purple10016 => const Color(0X16DFB7FF);

  // Red
  Color get red500 => const Color(0XFFEB4335);

  // Yellow
  Color get yellow700 => const Color(0XFFFFB431);

  // White
  Color get whiteA700 => const Color(0XFFFFFFFF);
  Color get whiteFdedf8 => const Color(0XFFFDEDF8);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
